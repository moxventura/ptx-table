<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="@vhyWM?zz@VAMmm!K%hR" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="%NH`F|6]B]6j9Moa).v1"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace table {" line1="" line2="    /**" line3="     * Creates a Table with the given amount of `rows` and `cols`" line4="     * @param rows the number of rows" line5="     * @param cols the number of columns" line6="     * @param defaultValue the default value for the matrix" line7="     */" line8="    //% block=&quot;Table with $rows rows and $cols cols|| default value $defaultValue&quot;" line9="    //% rows.min=1 rows.defl=5" line10="    //% cols.min=1 cols.defl=5" line11="    //% expandableArgumentMode=&quot;toggle&quot;" line12="    //% defaultValue.defl=0" line13="    //% group=&quot;Create&quot;" line14="    export function createTable(rows: number, cols: number, defaultValue?: number): number[][] {" line15="        let table: number[][] = [];" line16="        for (let i = 0; i &lt; rows; i++) {" line17="            table[i] = [];" line18="            for (let j = 0; j &lt; cols; j++) {" line19="                table[i][j] = defaultValue;" line20="            }" line21="        }" line22="        return table;" line23="    }" line24="" line25="    /**" line26="     * Sets a value in the table or does nothing if the location does not exist" line27="     * @param row the row number of the value to set" line28="     * @param col the column number of the value to set" line29="     */" line30="    //% block=&quot;in table $table| set value at row $row col $col| to $value&quot;" line31="    //% row.min=0" line32="    //% col.min=0" line33="    //% group=&quot;Access&quot;" line34="    export function setValue(table: number[][], row: number, col: number, value: number): void {" line35="        if (table[row] &amp;&amp; table[row][col] !== undefined) {" line36="            table[row][col] = value;" line37="        }" line38="    }" line39="" line40="    /**" line41="     * Gets a value from the table or `undefined` if the given cell does not exist" line42="     * @param table the table to get the value from" line43="     * @param row the row number" line44="     * @param col the column number" line45="     */" line46="    //% block=&quot;from table $table| get value at row $row| col $col&quot;" line47="    //% row.min=0" line48="    //% col.min=0" line49="    //% group=&quot;Access&quot;" line50="    export function getValue(table: number[][], row: number, col: number): number {" line51="        if (table[row] &amp;&amp; table[row][col] !== undefined) {" line52="            return table[row][col];" line53="        }" line54="        return undefined;" line55="    }" line56="" line57="    /**" line58="     * Writes the table to the led." line59="     * Optionally give the `row` and `col` of the cell to start drawing." line60="     * The starting cell would come in the top left corner" line61="     */" line62="    //% block=&quot;Write $table| to led|| starting from row $row and col $col or else $defaultValue&quot;" line63="    //% expandableArgumentMode=&quot;toggle&quot;" line64="    //% row.min=0 row.defl=0" line65="    //% col.min=0 col.defl=0" line66="    //% group=&quot;Operations&quot;" line67="    export function plot(table: number[][], row: number = 0, col: number = 0, defaultValue: number = 0) {" line68="        for (let k = 0; k &lt; 5; k++) {" line69="            for (let l = 0; l &lt; 5; l++) {" line70="                let value = getValue(table, row + k, col + l);" line71="                if (value == undefined) {" line72="                    value = defaultValue;" line73="                }" line74="                if (value &amp;&amp; value != 0) {" line75="                    led.plot(l, k);" line76="                }" line77="                else {" line78="                    led.unplot(l, k);" line79="                }" line80="            }" line81="        }" line82="    }" line83="" line84="  /**" line85="  * Writes the table to the led. Starting at the given `row` and `col` on the grid" line86="  * Optionally give the `row` and `col` of the cell to start drawing." line87="  * The defaultValue will fill the rest of the grid" line88="  */" line89="    //% block=&quot;Write $table| to led|| starting from row $row and col $col or else $defaultValue&quot;" line90="    //% expandableArgumentMode=&quot;toggle&quot;" line91="    //% row.min=0 row.defl=0" line92="    //% col.min=0 col.defl=0" line93="    //% group=&quot;Operations&quot;" line94="    export function plotAt(table: number[][], gridRow: number, gridCol: number, row: number = 0, col: number = 0, defaultValue: number = 0) {" line95="        for (let m = 0; m &lt; 5; m++) {" line96="            for (let n = 0; n &lt; 5; n++) {" line97="                let value2 = defaultValue;" line98="                if (m &lt; gridRow) {" line99="                    value2 = defaultValue;" line100="                } else if (n &lt; gridCol) {" line101="                    value2 = defaultValue;" line102="                }" line103="                else {" line104="                    value2 = getValue(table, row + m, col + n);" line105="                }" line106="                if (value2 == undefined) {" line107="                    value2 = defaultValue;" line108="                }" line109="                if (value2 &amp;&amp; value2 != 0) {" line110="                    led.plot(n, m);" line111="                }" line112="                else {" line113="                    led.unplot(n, m);" line114="                }" line115="            }" line116="        }" line117="    }" line118="}" numlines="119"></mutation></block></statement></block></xml>