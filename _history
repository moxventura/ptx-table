{"entries":[{"timestamp":1740160476937,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":70,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"//% color=\"#AA278D\" weight=50 icon=\"\\uf0ce\" block=\"Tables\" advanced=true\n//% groups=['Create', 'Access', 'Operations']\nnamespace table {\n\n    /**\n     * Creates a Table with the given amount of `rows` and `cols`\n     * @param rows the number of rows\n     * @param cols the number of columns\n     * @param defaultValue the default value for the matrix\n     */\n    //% block=\"Table with $rows rows and $cols cols|| default value $defaultValue\"\n    //% rows.min=1 rows.defl=5\n    //% cols.min=1 cols.defl=5\n    //% expandableArgumentMode=\"toggle\"\n    //% defaultValue.defl=0\n    //% group=\"Create\"\n    export function createTable(rows: number, cols: number, defaultValue?: number): number[][] {\n        let table: number[][] = [];\n        for (let i = 0; i < rows; i++) {\n            table[i] = [];\n            for (let j = 0; j < cols; j++) {\n                table[i][j] = defaultValue;\n            }\n        }\n        return table;\n    }\n\n    /**\n     * Sets a value in the table or does nothing if the location does not exist\n     * @param row the row number of the value to set\n     * @param col the column number of the value to set\n     */\n    //% block=\"in table $table| set value at row $row col $col| to $value\"\n    //% row.min=0\n    //% col.min=0\n    //% group=\"Access\"\n    export function setValue(table: number[][], row: number, col: number, value: number): void {\n        if (table[row] && table[row][col] !== undefined) {\n            table[row][col] = value;\n        }\n    }\n\n    /**\n     * Gets a value from the table or `undefined` if the given cell does not exist\n     * @param table the table to get the value from\n     * @param row the row number\n     * @param col the column number\n     */\n    //% block=\"from table $table| get value at row $row| col $col\"\n    //% row.min=0\n    //% col.min=0\n    //% group=\"Access\"\n    export function getValue(table: number[][], row: number, col: number): number {\n        if (table[row] && table[row][col] !== undefined) {\n            return table[row][col];\n        }\n        return undefined;\n    }\n\n    /**\n     * Gets a row from the table or `undefined` if the given row does not exist\n     * @param table the table to get the value from\n     * @param row the row number\n     */\n    //% block=\"from table $table get row $row\"\n    //% row.min=0\n    //% group=\"Access\"\n    export function getRow(table: number[][], row: number): number[] {\n        if (table[row] !== undefined) {\n            return table[row];\n        }\n        return undefined;\n    }\n\n    /**\n     * Gets a column from the table or `undefined` if the given column does not exist\n     * @param table the table to get the value from\n     * @param col the column number\n     */\n    //% block=\"from table $table get column $col\"\n    //% col.min=0\n    //% group=\"Access\"\n    export function getColumn(table: number[][], col: number): number[] | undefined {\n        if (table.length === 0 || col < 0) {\n            return undefined;\n        }\n\n        const column: number[] = [];\n        for (let row = 0; row < table.length; row++) {\n            if (table[row][col] !== undefined) {\n                column.push(table[row][col]);\n            }\n        }\n\n        return column.length > 0 ? column : undefined;\n    }\n\n    /**\n     * Writes the table to the led.\n     * Optionally give the `row` and `col` of the cell to start drawing.\n     * The starting cell would come in the top left corner\n     */\n    //% block=\"Write $table| to led|| starting from row $row and col $col or else $defaultValue\"\n    //% expandableArgumentMode=\"toggle\"\n    //% row.min=0 row.defl=0\n    //% col.min=0 col.defl=0\n    //% group=\"Operations\"\n    export function plot(table: number[][], row: number = 0, col: number = 0, defaultValue: number = 0) {\n        for (let i = 0; i < 5; i++) {\n            for (let j = 0; j < 5; j++) {\n                let value = getValue(table, row + i, col + j);\n                if (value == undefined) {\n                    value = defaultValue;\n                }\n                if (value && value != 0) {\n                    led.plot(j, i);\n                }\n                else {\n                    led.unplot(j, i);\n                }\n            }\n        }\n    }\n}"],[1,"\n"]],"start1":0,"start2":0,"length1":4200,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":233,"start2":233,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1740160476936,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"ptx-table\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1740160521150}